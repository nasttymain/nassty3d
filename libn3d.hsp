//-----------------------------------------------------------------------------------------------------------------------------
#module modtriangle
	#deffunc _modt_init
		dim initialized
		initialized = 1
		dim x,4
		dim y,4
	return
	#deffunc trianglef int x1,int y1,int x2,int y2,int x3,int y3
		triangle x1,y1,x2,y2,x3,y3
		if limit(x1, -32768, 32768) != x1 or limit(x2, -32768, 32768) != x2 or limit(x3, -32768, 32768) != x3{
			//logmes "GSQUARE X OUT OF RANGE!"
			return 1
		}
		if limit(y1, -32768, 32768) != y1 or limit(y2, -32768, 32768) != y2 or limit(y3, -32768, 32768) != y3{
			//logmes "GSQUARE Y OUT OF RANGE!"
			return 1
		}
		if initialized = 0{
			_modt_init
		}
		x(0)=x1,x2,x3,x3
		y(0)=y1,y2,y3,y3
		gsquare -1,x,y
	return 0
	#deffunc triangle int x1,int y1,int x2,int y2,int x3,int y3
		line x1,y1,x2,y2
		line x2,y2,x3,y3
		line x3,y3,x1,y1
	return 0
#global
//-----------------------------------------------------------------------------------------------------------------------------
#module nastty3d
//-----------------------------------------------------------------------------------------------------------------------------
	#define pi 3.1415926535898
	#deffunc n3d_initialize
		//レンダリング先画面に関する情報
		dim rsel
		rsel=0
		dim rsizex
		rsizex=800
		dim rsizey
		rsizey=800
		//640x480基準の倍率を指定
		ddim rscale
		rscale = 1.0//limitf(double(rsizex)/640, double(rsizey)/640)
		//カメラに関する情報。カメラは座標と、向きは球座標系で処理する
		ddim c_xpos
		ddim c_ypos
		ddim c_zpos
		#define global CAMERA_XPOS c_xpos@nastty3d
		#define global CAMERA_YPOS c_ypos@nastty3d
		#define global CAMERA_ZPOS c_zpos@nastty3d
		ddim c_sightp
		#define global CAMERA_PHI c_sightp@nastty3d
		ddim c_sightt
		#define global CAMERA_THETA c_sightt@nastty3d
		ddim c_sightr
		#define global CAMERA_ROTATION c_sightr@nastty3d
		//ポリゴンに関する情報。(テクスチャなしの生ポリ)
		dim p_count
		p_count=8192
		dim  p_avail	,p_count
		dim  p_group	,p_count
		dim  p_col		,p_count
		ddim p_x1		,p_count
		ddim p_y1		,p_count
		ddim p_z1		,p_count
		ddim p_x2		,p_count
		ddim p_y2		,p_count
		ddim p_z2		,p_count
		ddim p_x3		,p_count
		ddim p_y3		,p_count
		ddim p_z3		,p_count
		
		ddim povv
		povv=30.0
		
		dim polyedge
		polyedge=0
		
		dim pzsort		,p_count
		
		dim tstamp
		tstamp=gettime(6)*1000+gettime(7)
		dim info_polygoncount
		
		ldim customroutine
		customroutine=*blanksub@nastty3d
		dim onscreen_flag
		dim current_polygon
		
		//遠方の黒化
		dim cldecay_avail
		cldecay_avail = 1
		dim cldecay_offset
		cldecay_offset = 128
		ddim cldecay_gradient
		cldecay_gradient = 0.0012
		ddim cldecay_ratio
		
		#define CLOSEST_DISTANCE 0.0
		
		//最後にセットされたポリゴンのID
		dim lastset_id
		lastset_id = 0
		#define global N3D_LASTSET lastset_id@nastty3d
		
		
	return 0
//-----------------------------------------------------------------------------------------------------------------------------
*blanksub
	return
//-----------------------------------------------------------------------------------------------------------------------------
	#deffunc n3d_setCameraPosition double x, double y, double z
		c_xpos=double(x)
		c_ypos=double(y)
		c_zpos=double(z)
	return 0
//-----------------------------------------------------------------------------------------------------------------------------
	#define global n3d_setCameraAngleByLookingAt(%1, %2, %3, %4 = 0.0) __n3d_setCameraAngleByLookingAt %1, %2, %3, %4
	#deffunc __n3d_setCameraAngleByLookingAt double x, double y, double z, double rotation
		if (x - c_xpos) * (x - c_xpos) + (y - c_ypos) * (y - c_ypos) = 0.0{
			dxy = 0.0
		}else{
			dxy = sqrt((x - c_xpos) * (x - c_xpos) + (y - c_ypos) * (y - c_ypos))
		}
		if (x - c_xpos) * (x - c_xpos) + (y - c_ypos) * (y - c_ypos) + (z - c_zpos) * (z - c_zpos) = 0.0{
			dxyz = 0.0
		}else{
			dxyz = sqrt((x - c_xpos) * (x - c_xpos) + (y - c_ypos) * (y - c_ypos) + (z - c_zpos) * (z - c_zpos))
		}
		n3d_setCameraAngle atan(y - c_ypos, x - c_xpos), pi / 2 - atan(z - c_zpos, dxy), c_sightr
		c_sightr=rotation
	return 0
//-----------------------------------------------------------------------------------------------------------------------------
	#deffunc n3d_moveCameraPositionByAngle double r, double phi, double theta
		c_xpos+= r * sin(theta)*cos(phi)
		c_ypos+= r * sin(theta)*sin(phi)
		c_zpos+= r * cos(theta)
	return 0
//-----------------------------------------------------------------------------------------------------------------------------
	#deffunc n3d_moveCameraPositionVerticallyByAngle double r, double phi, double theta
		c_xpos+= r * sin(pi/2)*cos(phi)
		c_ypos+= r * sin(pi/2)*sin(phi)
		//c_zpos+= r * cos(theta)
	return 0
//-----------------------------------------------------------------------------------------------------------------------------
	#deffunc n3d_setCameraAngle double phi, double theta, double rotation
		c_sightt=( theta + pi*2 ) \ (pi*2)
		c_sightp=( phi + pi*2 ) \ (pi*2)
		c_sightr=rotation
	return 0
//-----------------------------------------------------------------------------------------------------------------------------
	#define ctype INRANGE(%1,%2,%3) (%2<=%1 & %1<=%3)
//-----------------------------------------------------------------------------------------------------------------------------
	#deffunc n3d_render
		
		info_polygoncount=0
		//カメラアングル情報から投影面に対する法線ベクトルを求める。
		//(カメラ座標) = (nsx,nsy,nsz)
		//(法線ベクトル) = (nsx,nsy,nsz)+t(nvx,nvy,nvz) (tは任意の実数)
		//(平面方程式) = (nvx)x+(nvy)y+(nvz)z+d=0
		nsx=c_xpos
		nsy=c_ypos
		nsz=c_zpos
		nvx=sin(c_sightt)*cos(c_sightp) * 0.1
		nvy=sin(c_sightt)*sin(c_sightp) * 0.1
		nvz=cos(c_sightt)               * 0.1
		
		//投影面の軸をx'軸、y'軸とおき、そのベクトルを求める。
		//現段階では回転について考慮しないので、y'軸はz一定軸。
		//x'はtheta一定軸(rとphiが変化する)で、y'はphi一定(rとthetaが変化する)軸。
		//x'
		//(原点)  =  (nsx,nsy,nsz)+(nvx,nvy,nvz)
		//(x軸ベクトル) = (原点)+t(xdx,xdy,xdz)
		//(y軸ベクトル) = (原点)+t(ydx,ydy,ydz)
		xdx=-1.0*cos(pi/2+c_sightp)
		xdy=-1.0*sin(pi/2+c_sightp)
		xdz=0.0

		ydx=0.0
		ydy=0.0
		ydz=sin(pi-c_sightt)
		//h: sqrt(x^2+y^2)
		ydh=cos(pi-c_sightt)
		//ydhu: 長さ1のy'軸向きベクトルに関するsqrt(x^2+y^2)の長さをルートしたもの。ydhの長さからydx、ydyの長さを求めるのに使う
		ydhu=sqrt(1-ydz*ydz)
		if ydhu=0.0{
			//theta=0のときに発生する。y軸がz軸に垂直
		}else{
			ydx=1.0*cos(c_sightp)*(ydh/ydhu)
			ydy=1.0*sin(c_sightp)*(ydh/ydhu)
		}
		
		//前後関係の判定。前処理として、カメラとポリゴンとの距離を測定
		repeat length(p_avail)
			if p_avail(cnt)=0{
				pzsort(cnt)=65536.0
				continue
			}
			pvx1=(p_x1(cnt)-nsx)
			pvy1=(p_y1(cnt)-nsy)
			pvz1=(p_z1(cnt)-nsz)
			pvx2=(p_x2(cnt)-nsx)
			pvy2=(p_y2(cnt)-nsy)
			pvz2=(p_z2(cnt)-nsz)
			pvx3=(p_x3(cnt)-nsx)
			pvy3=(p_y3(cnt)-nsy)
			pvz3=(p_z3(cnt)-nsz)

			pzsort(cnt)=( sqrt(pvx1*pvx1+pvy1*pvy1+pvz1*pvz1) + sqrt(pvx2*pvx2+pvy2*pvy2+pvz2*pvz2) + sqrt(pvx3*pvx3+pvy3*pvy3+pvz3*pvz3) )/3
		loop
		sortval pzsort,1
		
		repeat length(p_avail)
			sortget ncnt,cnt
			//ncnt=cnt
			if p_avail(ncnt)=1{
				tooclose = 0
				//(カメラから点へのベクトル) = (nsx,nsy,nsz) + (pvx,pvy,pvz)
				//カメラからの距離: pvl
				//ct: カメラからポリゴンの中点(pcx,pcy,pcz)と、法線との成す角の余弦 cos(theta)
				wr=1
				
				pvx1=(p_x1(ncnt)-nsx)
				pvy1=(p_y1(ncnt)-nsy)
				pvz1=(p_z1(ncnt)-nsz)
				if (pvx1*nvx+pvy1*nvy+pvz1*nvz)<=CLOSEST_DISTANCE{
					pvl1=0.0
					tooclose = 1
				}else{
					pvl1=1.0/absf(pvx1*nvx+pvy1*nvy+pvz1*nvz)
					//pvl1=2.0/(pvx1*nvx+pvy1*nvy+pvz1*nvz + 10)
				}
				jxd1=pvx1*xdx+pvy1*xdy+pvz1*xdz
				jyd1=pvx1*ydx+pvy1*ydy+pvz1*ydz
				iv1=(pvx1*nvx+pvy1*nvy+pvz1*nvz)
				
				dx1=double(rsizex)/2 + (jxd1*povv*pvl1 * rscale) * cos(c_sightr) - (jyd1*povv*pvl1 * rscale) * sin(c_sightr)
				dy1=double(rsizey)/2 + (jxd1*povv*pvl1 * rscale) * sin(c_sightr) + (jyd1*povv*pvl1 * rscale) * cos(c_sightr)
				
				
				pvx2=(p_x2(ncnt)-nsx)
				pvy2=(p_y2(ncnt)-nsy)
				pvz2=(p_z2(ncnt)-nsz)
				if (pvx2*nvx+pvy2*nvy+pvz2*nvz)<=CLOSEST_DISTANCE{
					pvl2=0.0
					tooclose = 1
				}else{
					pvl2=1.0/absf(pvx2*nvx+pvy2*nvy+pvz2*nvz)
					//pvl2=2.0/(pvx2*nvx+pvy2*nvy+pvz2*nvz + 10)
				}
				jxd2=pvx2*xdx+pvy2*xdy+pvz2*xdz
				jyd2=pvx2*ydx+pvy2*ydy+pvz2*ydz
				iv2=(pvx2*nvx+pvy2*nvy+pvz2*nvz)
				
				dx2=double(rsizex)/2 + (jxd2*povv*pvl2 * rscale) * cos(c_sightr) - (jyd2*povv*pvl2 * rscale) * sin(c_sightr)
				dy2=double(rsizey)/2 + (jxd2*povv*pvl2 * rscale) * sin(c_sightr) + (jyd2*povv*pvl2 * rscale) * cos(c_sightr)
				
				
				pvx3=(p_x3(ncnt)-nsx)
				pvy3=(p_y3(ncnt)-nsy)
				pvz3=(p_z3(ncnt)-nsz)
				if (pvx3*nvx+pvy3*nvy+pvz3*nvz)<=CLOSEST_DISTANCE{
					pvl3=0.0
					tooclose = 1
				}else{
					pvl3=1.0/absf(pvx3*nvx+pvy3*nvy+pvz3*nvz)
					//pvl3=2.0/(pvx3*nvx+pvy3*nvy+pvz3*nvz + 10)
				}
				jxd3=pvx3*xdx+pvy3*xdy+pvz3*xdz
				jyd3=pvx3*ydx+pvy3*ydy+pvz3*ydz
				iv3=(pvx3*nvx+pvy3*nvy+pvz3*nvz)
				
				
				pcx=(pvx1+pvx2+pvx3)/3
				pcy=(pvy1+pvy2+pvy3)/3
				pcz=(pvz1+pvz2+pvz3)/3
				if sqrt(nvx*nvx+nvy*nvy+nvz*nvz)*sqrt(pcx*pcx+pcy*pcy+pcz*pcz)!=0.0{
					ct=(nvx*pcx+nvy*pcy+nvz*pcz) / (sqrt(nvx*nvx+nvy*nvy+nvz*nvz)*sqrt(pcx*pcx+pcy*pcy+pcz*pcz))
				}else{
					ct=pi
				}
				
				//描画点: dx1,dy1,dx2,dy2,dx3,dy3
				dx3=double(rsizex)/2 + (jxd3*povv*pvl3 * rscale) * cos(c_sightr) - (jyd3*povv*pvl3 * rscale) * sin(c_sightr)
				dy3=double(rsizey)/2 + (jxd3*povv*pvl3 * rscale) * sin(c_sightr) + (jyd3*povv*pvl3 * rscale) * cos(c_sightr)
				
				onscreen_flag=0
				
				//psd1〜3: 各頂点が投影面の裏にあるか表にあるかを判定。(投影面の原点-頂点) * (法線ベクトル)。
				#define ctype SIGN(%1) (((%1)>0) - ((%1)<0)) 
				psd1 = (p_x1(ncnt) - nsx - nvx) * nvx + (p_y1(ncnt) - nsy - nvy) * nvy + (p_z1(ncnt) - nsz - nvz) * nvz
				psd2 = (p_x2(ncnt) - nsx - nvx) * nvx + (p_y2(ncnt) - nsy - nvy) * nvy + (p_z2(ncnt) - nsz - nvz) * nvz
				psd3 = (p_x3(ncnt) - nsx - nvx) * nvx + (p_y3(ncnt) - nsy - nvy) * nvy + (p_z3(ncnt) - nsz - nvz) * nvz
				
//				if ct>=0.0 & INRANGE(dx1,-rsizex,2*rsizex) & INRANGE(dx2,-rsizex,2*rsizex) & INRANGE(dx3,-rsizex,2*rsizex) & INRANGE(dy1,-rsizey,2*rsizey) & INRANGE(dy2,-rsizey,2*rsizey) & INRANGE(dy3,-rsizey,2*rsizey){
				if ct >= 0.0{
//					if iv1*iv2<=0.0 | iv1*iv3<0.0 | iv2*iv3<0.0{
						//logmes "面切 "+cnt
//					}else{
				if SIGN(psd1) = 1 and SIGN(psd2) = 1 and SIGN(psd3) = 1 and tooclose = 0{
						onscreen_flag=1
						if cldecay_avail = 0{
							color p_col(ncnt) / 65536, p_col(ncnt) \ 65536 / 256, p_col(ncnt) \ 256
						}else{
							cldecay_ratio = limitf(1.0 - limitf(pzsort(cnt) - cldecay_offset, 0.0) * cldecay_gradient, 0.0, 1.0)
							color cldecay_ratio * (p_col(ncnt) / 65536), cldecay_ratio * (p_col(ncnt) \ 65536 / 256), cldecay_ratio * (p_col(ncnt) \ 256)
						}
						trianglef dx1,dy1,dx2,dy2,dx3,dy3
						if polyedge=1 & p_group(ncnt)!=15{
							rgbcolor 16777215
							triangle dx1,dy1,dx2,dy2,dx3,dy3
						}
						info_polygoncount++
//					}
//					}
				}else{
					if SIGN(psd1) = -1 and SIGN(psd2) = -1 and SIGN(psd3) = -1{
						//logmes "完全に裏面"
					}else{
						tooclose12 = 0
						tooclose13 = 0
						tooclose23 = 0
						//logmes "一部裏面"
						#define ctype SQUARE(%1) (%1)*(%1)
						//(psd1は、点1から下ろした垂線の足から原点までの距離である。ここから、垂線の足-点1の距離(pse1)を求められる。線分(点1-点2)のどこに平面との交点があるかは、垂線の足から点までの距離の比で求まる。
						//o_x12など: 線分1-2と投影面との交点の座標
						pse1 = sqrt( ( SQUARE(p_x1(ncnt) - nsx - nvx) + SQUARE(p_y1(ncnt) - nsy - nvy) + SQUARE(p_z1(ncnt) - nsz - nvz) ) - SQUARE(psd1) )
						pse2 = sqrt( ( SQUARE(p_x2(ncnt) - nsx - nvx) + SQUARE(p_y2(ncnt) - nsy - nvy) + SQUARE(p_z2(ncnt) - nsz - nvz) ) - SQUARE(psd2) )
						pse3 = sqrt( ( SQUARE(p_x3(ncnt) - nsx - nvx) + SQUARE(p_y3(ncnt) - nsy - nvy) + SQUARE(p_z3(ncnt) - nsz - nvz) ) - SQUARE(psd3) )
						
						o_x12 = p_x1(ncnt) + (p_x2(ncnt) - p_x1(ncnt)) * pse1 / (pse1 + pse2)
						o_y12 = p_y1(ncnt) + (p_y2(ncnt) - p_y1(ncnt)) * pse1 / (pse1 + pse2)
						o_z12 = p_z1(ncnt) + (p_z2(ncnt) - p_z1(ncnt)) * pse1 / (pse1 + pse2)
						
						ovx12=(o_x12-nsx)
						ovy12=(o_y12-nsy)
						ovz12=(o_z12-nsz)
						if (ovx12*nvx+ovy12*nvy+ovz12*nvz)<=CLOSEST_DISTANCE{
							ovl12=0.0
							tooclose12 = 1
						}else{
							ovl12=1.0/absf(ovx12*nvx+ovy12*nvy+ovz12*nvz)
							//ovl12=2.0/absf(ovx12*nvx+ovy12*nvy+ovz12*nvz + 10)
							//ovl12 = powf(0.1, (ovx12*nvx+ovy12*nvy+ovz12*nvz))
						}
						jxdo12=ovx12*xdx+ovy12*xdy+ovz12*xdz
						jydo12=ovx12*ydx+ovy12*ydy+ovz12*ydz
						ivo12=(ovx12*nvx+ovy12*nvy+ovz12*nvz)
						
						dx12=double(rsizex)/2 + (jxdo12*povv*ovl12 * rscale)
						dy12=double(rsizey)/2 + (jydo12*povv*ovl12 * rscale)
						
						
						
						o_x13 = p_x1(ncnt) + (p_x3(ncnt) - p_x1(ncnt)) * pse1 / (pse1 + pse3)
						o_y13 = p_y1(ncnt) + (p_y3(ncnt) - p_y1(ncnt)) * pse1 / (pse1 + pse3)
						o_z13 = p_z1(ncnt) + (p_z3(ncnt) - p_z1(ncnt)) * pse1 / (pse1 + pse3)
						
						ovx13=(o_x13-nsx)
						ovy13=(o_y13-nsy)
						ovz13=(o_z13-nsz)
						//logmes (ovx13*nvx+ovy13*nvy+ovz13*nvz)
						if (ovx13*nvx+ovy13*nvy+ovz13*nvz)<=CLOSEST_DISTANCE{
							ovl13=0.0
							tooclose13 = 1
						}else{
							ovl13=1.0/absf(ovx13*nvx+ovy13*nvy+ovz13*nvz)
							//ovl13 = powf(0.1, (ovx13*nvx+ovy13*nvy+ovz13*nvz))
							//ovl13=2.0/absf(ovx13*nvx+ovy13*nvy+ovz13*nvz + 10)
						}
						jxdo13=ovx13*xdx+ovy13*xdy+ovz13*xdz
						jydo13=ovx13*ydx+ovy13*ydy+ovz13*ydz
						ivo13=(ovx13*nvx+ovy13*nvy+ovz13*nvz)
						
						dx13=double(rsizex)/2 + (jxdo13*povv*ovl13 * rscale)
						dy13=double(rsizey)/2 + (jydo13*povv*ovl13 * rscale)
						
						
						
						o_x23 = p_x2(ncnt) + (p_x3(ncnt) - p_x2(ncnt)) * pse2 / (pse2 + pse3)
						o_y23 = p_y2(ncnt) + (p_y3(ncnt) - p_y2(ncnt)) * pse2 / (pse2 + pse3)
						o_z23 = p_z2(ncnt) + (p_z3(ncnt) - p_z2(ncnt)) * pse2 / (pse2 + pse3)
						
						ovx23=(o_x23-nsx)
						ovy23=(o_y23-nsy)
						ovz23=(o_z23-nsz)
						if (ovx23*nvx+ovy23*nvy+ovz23*nvz)<=CLOSEST_DISTANCE{
							ovl23=0.0
							tooclose23=1
						}else{
							ovl23=1.0/absf(ovx23*nvx+ovy23*nvy+ovz23*nvz)
							//ovl23 = powf(0.1, (ovx23*nvx+ovy23*nvy+ovz23*nvz))
							//ovl23=2.0/absf(ovx23*nvx+ovy23*nvy+ovz23*nvz + 10)
						}
						jxdo23=ovx23*xdx+ovy23*xdy+ovz23*xdz
						jydo23=ovx23*ydx+ovy23*ydy+ovz23*ydz
						ivo23=(ovx23*nvx+ovy23*nvy+ovz23*nvz)
						
						dx23=double(rsizex)/2 + (jxdo23*povv*ovl23 * rscale)
						dy23=double(rsizey)/2 + (jydo23*povv*ovl23 * rscale)
						
						//logmes "" + (pse1 / (pse1 + pse2)) + " " + (pse1 / (pse1 + pse3)) + " " + (pse2 / (pse2 + pse3)) // PASS
						//logmes  "" + o_x12 + " " + o_x13 + " " + o_x23 // PASS
						//logmes  "" + o_y12 + " " + o_y13 + " " + o_y23 // PASS
						//logmes  "" + o_z12 + " " + o_z13 + " " + o_z23 // PASS
						//logmes "" + jxdo12 + " " + jxdo13 + " " + jxdo23 // PASS
						//logmes "" + jydo12 + " " + jydo13 + " " + jydo23 // PASS
						//logmes "" + ivo12 + " " + ivo13 + " " + ivo23 // FAIL (if negative, goes wrong)
						//logmes "" + ovl12 + " " + ovl13 + " " + ovl23
						//logmes strf("%.2f %.2f  %.2f %.2f  %.2f %.2f", dx12, dy12, dx13, dy13, dx23, dy23)
						//---------------------------------------------------------
						if cldecay_avail = 0{
							color p_col(ncnt) / 65536, p_col(ncnt) \ 65536 / 256, p_col(ncnt) \ 256
						}else{
							cldecay_ratio = limitf(1.0 - limitf(pzsort(cnt) - cldecay_offset, 0.0) * cldecay_gradient, 0.0, 1.0)
							color cldecay_ratio * (p_col(ncnt) / 65536), cldecay_ratio * (p_col(ncnt) \ 65536 / 256), cldecay_ratio * (p_col(ncnt) \ 256)
						}
						if  SIGN(psd1) = 1 and SIGN(psd2) = -1 and SIGN(psd3) = -1 and tooclose12 = 0 and tooclose13 = 0{
							onscreen_flag=1
							//logmes "+--"
							trianglef dx1,dy1,dx12,dy12,dx13,dy13
						}
						/*
						//---------------------------------------------------------
						if  SIGN(psd1) = -1 and SIGN(psd2) = 1 and SIGN(psd3) = -1 and tooclose12 = 0 and tooclose23 = 0{
							onscreen_flag=1
							//logmes "-+-"
							trianglef dx2,dy2,dx12,dy12,dx23,dy23
						}
						//---------------------------------------------------------
						if  SIGN(psd1) = -1 and SIGN(psd2) = -1 and SIGN(psd3) = 1 and tooclose13 = 0 and tooclose23 = 0{
							onscreen_flag=1
							//logmes "--+"
							trianglef dx3,dy3,dx13,dy13,dx23,dy23
						}
						//---------------------------------------------------------
						if  SIGN(psd1) = 1 and SIGN(psd2) = 1 and SIGN(psd3) = -1 and tooclose13 = 0 and tooclose23 = 0{
							onscreen_flag=1
							//logmes "++-"
							trianglef dx13, dy13, dx23, dy23, dx1, dy1
							trianglef dx23, dy23, dx2, dy2, dx1, dy1
						}
						//---------------------------------------------------------
						if  SIGN(psd1) = -1 and SIGN(psd2) = 1 and SIGN(psd3) = 1 and tooclose13 = 0 and tooclose12 = 0{
							onscreen_flag=1
							//logmes "-++"
							trianglef dx13, dy13, dx12, dy12, dx2, dy2
							trianglef dx13, dy13, dx2, dy2, dx3, dy3
						}
						//---------------------------------------------------------
						if  SIGN(psd1) = 1 and SIGN(psd2) = -1 and SIGN(psd3) = 1 and tooclose12 = 0 and tooclose23 = 0{
							onscreen_flag=1
							//logmes "+-+"
							trianglef dx12, dy12, dx23, dy23, dx1, dy1
							trianglef dx23, dy23, dx1, dy1, dx3, dy3
						}
						//---------------------------------------------------------*/
					}//*/
				}	}
				current_polygon=ncnt
				gosub customroutine
			}
		loop
	return 0
//-----------------------------------------------------------------------------------------------------------------------------
	#deffunc n3d_setcustomroutine label cr
		customroutine=cr
	return 0
//-----------------------------------------------------------------------------------------------------------------------------
	#deffunc n3d_renderinfo
		font msgothic,12
		color 255,128,128
		pos 0,0
		mes "CAM"
		color 255,255,255
		pos 32,0
		mes strf("角度 %3d , %3d",c_sightp*360/pi/2,c_sightt*360/pi/2)
		pos 128,0
		mes strf("座標( %.2f, %.2f , %.2f)",c_xpos,c_ypos,c_zpos)
		pos 320,0
		mes strf("法線(%.2f , %.2f , %.2f)",nvx,nvy,nvz)
		pos 32,12
		mes strf("x'軸(%.2f , %.2f , %.2f)",xdx,xdy,xdz)
		pos 192,12
		mes strf("y'軸(%.2f , %.2f , %.2f)",ydx,ydy,ydz)
		
		pos 0,24
		color 255,128,128
		mes "FRAME"
		color 255,255,255
		pos 32,24
		mes strf("間隔 %3dms", (gettime(6)*1000+gettime(7)-tstamp+60000)\60000)
		tstamp=gettime(6)*1000+gettime(7)
		pos 128,24
		mes strf("ポリ数 %4d", info_polygoncount)
		/*pos 0+32,12
		mes strf("ydh %.1f",ydh)
		pos 64+32,12
		mes strf("ydhu %.1f",ydhu)*/
		
	return 0
//-----------------------------------------------------------------------------------------------------------------------------
	#deffunc n3d_setPolygon int group, int pcolor, double x1, double y1, double z1, double x2, double y2, double z2, double x3, double y3, double z3
		repeat length(p_avail)
			if p_avail(cnt)=0{
				p_avail(cnt)=1
				p_group(cnt)=group
				p_col(cnt)=pcolor
				p_x1(cnt)=double(x1)
				p_y1(cnt)=double(y1)
				p_z1(cnt)=double(z1)
				p_x2(cnt)=double(x2)
				p_y2(cnt)=double(y2)
				p_z2(cnt)=double(z2)
				p_x3(cnt)=double(x3)
				p_y3(cnt)=double(y3)
				p_z3(cnt)=double(z3)
				lastset_id = cnt
				break
			}
		loop
	return 0
//-----------------------------------------------------------------------------------------------------------------------------
	#deffunc n3d_deleteByGroup int group
		repeat length(p_avail)
			if p_avail(cnt)!=0 & p_group(cnt)=group{
				p_avail(cnt)=0
			}
		loop
	return 0
//-----------------------------------------------------------------------------------------------------------------------------
	#deffunc n3d_deleteall
		repeat length(p_avail)
			if p_avail(cnt)!=0{
				p_avail(cnt)=0
			}
		loop
	return 0
//-----------------------------------------------------------------------------------------------------------------------------
	#deffunc n3d_rotateXByGroup int group, double std_x, double std_y, double std_z, double rotation
		repeat length(p_avail)
			if p_avail(cnt)=1{
				if p_group(cnt)=group{
					
					p_ny1=(p_y1(cnt)-std_y)*cos(rotation) - (p_z1(cnt)-std_z)*sin(rotation) + std_y
					p_nz1=(p_y1(cnt)-std_y)*sin(rotation) + (p_z1(cnt)-std_z)*cos(rotation) + std_z
					p_ny2=(p_y2(cnt)-std_y)*cos(rotation) - (p_z2(cnt)-std_z)*sin(rotation) + std_y
					p_nz2=(p_y2(cnt)-std_y)*sin(rotation) + (p_z2(cnt)-std_z)*cos(rotation) + std_z
					p_ny3=(p_y3(cnt)-std_y)*cos(rotation) - (p_z3(cnt)-std_z)*sin(rotation) + std_y
					p_nz3=(p_y3(cnt)-std_y)*sin(rotation) + (p_z3(cnt)-std_z)*cos(rotation) + std_z
					
					p_y1(cnt)=p_ny1
					p_z1(cnt)=p_nz1
					p_y2(cnt)=p_ny2
					p_z2(cnt)=p_nz2
					p_y3(cnt)=p_ny3
					p_z3(cnt)=p_nz3
				}
			}
		loop
	return 0
//-----------------------------------------------------------------------------------------------------------------------------
	#deffunc n3d_rotateYByGroup int group, double std_x, double std_y, double std_z, double rotation
		repeat length(p_avail)
			if p_avail(cnt)=1{
				if p_group(cnt)=group{
					
					p_nx1=(p_x1(cnt)-std_x)*cos(rotation) - (p_z1(cnt)-std_z)*sin(rotation) + std_x
					p_nz1=(p_x1(cnt)-std_x)*sin(rotation) + (p_z1(cnt)-std_z)*cos(rotation) + std_z
					p_nx2=(p_x2(cnt)-std_x)*cos(rotation) - (p_z2(cnt)-std_z)*sin(rotation) + std_x
					p_nz2=(p_x2(cnt)-std_x)*sin(rotation) + (p_z2(cnt)-std_z)*cos(rotation) + std_z
					p_nx3=(p_x3(cnt)-std_x)*cos(rotation) - (p_z3(cnt)-std_z)*sin(rotation) + std_x
					p_nz3=(p_x3(cnt)-std_x)*sin(rotation) + (p_z3(cnt)-std_z)*cos(rotation) + std_z
					
					p_x1(cnt)=p_nx1
					p_z1(cnt)=p_nz1
					p_x2(cnt)=p_nx2
					p_z2(cnt)=p_nz2
					p_x3(cnt)=p_nx3
					p_z3(cnt)=p_nz3
				}
			}
		loop
	return 0
//-----------------------------------------------------------------------------------------------------------------------------
	#deffunc n3d_rotateZByGroup int group, double std_x, double std_y, double std_z, double rotation
		repeat length(p_avail)
			if p_avail(cnt)=1{
				if p_group(cnt)=group{
					
					p_nx1=(p_x1(cnt)-std_x)*cos(rotation) - (p_y1(cnt)-std_y)*sin(rotation) + std_x
					p_ny1=(p_x1(cnt)-std_x)*sin(rotation) + (p_y1(cnt)-std_y)*cos(rotation) + std_y
					p_nx2=(p_x2(cnt)-std_x)*cos(rotation) - (p_y2(cnt)-std_y)*sin(rotation) + std_x
					p_ny2=(p_x2(cnt)-std_x)*sin(rotation) + (p_y2(cnt)-std_y)*cos(rotation) + std_y
					p_nx3=(p_x3(cnt)-std_x)*cos(rotation) - (p_y3(cnt)-std_y)*sin(rotation) + std_x
					p_ny3=(p_x3(cnt)-std_x)*sin(rotation) + (p_y3(cnt)-std_y)*cos(rotation) + std_y
					
					p_x1(cnt)=p_nx1
					p_y1(cnt)=p_ny1
					p_x2(cnt)=p_nx2
					p_y2(cnt)=p_ny2
					p_x3(cnt)=p_nx3
					p_y3(cnt)=p_ny3
				}
			}
		loop
	return 0
//-----------------------------------------------------------------------------------------------------------------------------
	#deffunc n3d_rotateXById int id, double std_x, double std_y, double std_z, double rotation
//		repeat length(p_avail)
//			if p_avail(cnt)=1{
//				if p_group(cnt)=group{
					
					p_ny1=(p_y1(id)-std_y)*cos(rotation) - (p_z1(id)-std_z)*sin(rotation) + std_y
					p_nz1=(p_y1(id)-std_y)*sin(rotation) + (p_z1(id)-std_z)*cos(rotation) + std_z
					p_ny2=(p_y2(id)-std_y)*cos(rotation) - (p_z2(id)-std_z)*sin(rotation) + std_y
					p_nz2=(p_y2(id)-std_y)*sin(rotation) + (p_z2(id)-std_z)*cos(rotation) + std_z
					p_ny3=(p_y3(id)-std_y)*cos(rotation) - (p_z3(id)-std_z)*sin(rotation) + std_y
					p_nz3=(p_y3(id)-std_y)*sin(rotation) + (p_z3(id)-std_z)*cos(rotation) + std_z
					
					p_y1(id)=p_ny1
					p_z1(id)=p_nz1
					p_y2(id)=p_ny2
					p_z2(id)=p_nz2
					p_y3(id)=p_ny3
					p_z3(id)=p_nz3
//				}
//			}
//		loop
	return 0
//-----------------------------------------------------------------------------------------------------------------------------
	#deffunc n3d_rotateYById int id, double std_x, double std_y, double std_z, double rotation
//		repeat length(p_avail)
//			if p_avail(cnt)=1{
//				if p_group(cnt)=group{
					
					p_nx1=(p_x1(id)-std_x)*cos(rotation) - (p_z1(id)-std_z)*sin(rotation) + std_x
					p_nz1=(p_x1(id)-std_x)*sin(rotation) + (p_z1(id)-std_z)*cos(rotation) + std_z
					p_nx2=(p_x2(id)-std_x)*cos(rotation) - (p_z2(id)-std_z)*sin(rotation) + std_x
					p_nz2=(p_x2(id)-std_x)*sin(rotation) + (p_z2(id)-std_z)*cos(rotation) + std_z
					p_nx3=(p_x3(id)-std_x)*cos(rotation) - (p_z3(id)-std_z)*sin(rotation) + std_x
					p_nz3=(p_x3(id)-std_x)*sin(rotation) + (p_z3(id)-std_z)*cos(rotation) + std_z
					
					p_x1(id)=p_nx1
					p_z1(id)=p_nz1
					p_x2(id)=p_nx2
					p_z2(id)=p_nz2
					p_x3(id)=p_nx3
					p_z3(id)=p_nz3
//				}
//			}
//		loop
	return 0
//-----------------------------------------------------------------------------------------------------------------------------
	#deffunc n3d_rotateZById int id, double std_x, double std_y, double std_z, double rotation
//		repeat length(p_avail)
//			if p_avail(id)=1{
//				if p_group(id)=group{
					
					p_nx1=(p_x1(id)-std_x)*cos(rotation) - (p_y1(id)-std_y)*sin(rotation) + std_x
					p_ny1=(p_x1(id)-std_x)*sin(rotation) + (p_y1(id)-std_y)*cos(rotation) + std_y
					p_nx2=(p_x2(id)-std_x)*cos(rotation) - (p_y2(id)-std_y)*sin(rotation) + std_x
					p_ny2=(p_x2(id)-std_x)*sin(rotation) + (p_y2(id)-std_y)*cos(rotation) + std_y
					p_nx3=(p_x3(id)-std_x)*cos(rotation) - (p_y3(id)-std_y)*sin(rotation) + std_x
					p_ny3=(p_x3(id)-std_x)*sin(rotation) + (p_y3(id)-std_y)*cos(rotation) + std_y
					
					p_x1(id)=p_nx1
					p_y1(id)=p_ny1
					p_x2(id)=p_nx2
					p_y2(id)=p_ny2
					p_x3(id)=p_nx3
					p_y3(id)=p_ny3
//				}
//			}
//		loop
	return 0
//-----------------------------------------------------------------------------------------------------------------------------
	#define global N3D_POLYGON_EDGE polyedge@nastty3d
//-----------------------------------------------------------------------------------------------------------------------------
#global
//-----------------------------------------------------------------------------------------------------------------------------
//-----------------------------------------------------------------------------------------------------------------------------



//-----------------------------------------------------------------------------------------------------------------------------
//-----------------------------------------------------------------------------------------------------------------------------
#module n3dm
//-----------------------------------------------------------------------------------------------------------------------------
#define pi 3.1415926535898
//-----------------------------------------------------------------------------------------------------------------------------
#deffunc n3dm_initialize
	sdim src,131072
	sdim ol,65536
	sdim elem,16,16
return 0
//-----------------------------------------------------------------------------------------------------------------------------
#deffunc n3dm_setModel str modeldata, int group, double xposition, double yposition, double zposition
	//xrotation: x固定、y:z可変
	n3d_deleteByGroup group
	src=modeldata
	notesel src
	repeat notemax
		noteget ol,cnt
		split ol," ",elem
		//n3d_setPolygon group, int(elem(0)), double(elem(1))+xposition, double(elem(2))+yposition, double(elem(3))+zposition, double(elem(4))+xposition, double(elem(5))+yposition, double(elem(6))+zposition, double(elem(7))+xposition, double(elem(8))+yposition, double(elem(9))+zposition
		x1=double(elem(1))+xposition
		y1=double(elem(2))+yposition
		z1=double(elem(3))+zposition
		x2=double(elem(4))+xposition
		y2=double(elem(5))+yposition
		z2=double(elem(6))+zposition
		x3=double(elem(7))+xposition
		y3=double(elem(8))+yposition
		z3=double(elem(9))+zposition
		n3d_setPolygon group, int(elem(0)), x1, y1, z1, x2, y2, z2, x3, y3, z3
	loop
return 0
//-----------------------------------------------------------------------------------------------------------------------------
#deffunc n3dm_setModelAndRotate str modeldata, int group, double xposition, double yposition, double zposition, double xrotation, double yrotation, double zrotation
	//xrotation: x固定、y:z可変
	n3d_deleteByGroup group
	src=modeldata
	notesel src
	repeat notemax
		noteget ol,cnt
		split ol," ",elem
		//n3d_setPolygon group, int(elem(0)), double(elem(1))+xposition, double(elem(2))+yposition, double(elem(3))+zposition, double(elem(4))+xposition, double(elem(5))+yposition, double(elem(6))+zposition, double(elem(7))+xposition, double(elem(8))+yposition, double(elem(9))+zposition
		x1=double(elem(1))+xposition
		y1=double(elem(2))+yposition
		z1=double(elem(3))+zposition
		x2=double(elem(4))+xposition
		y2=double(elem(5))+yposition
		z2=double(elem(6))+zposition
		x3=double(elem(7))+xposition
		y3=double(elem(8))+yposition
		z3=double(elem(9))+zposition
		n3d_setPolygon group, int(elem(0)), x1, y1, z1, x2, y2, z2, x3, y3, z3
		n3d_rotateXById N3D_LASTSET, xposition, yposition, zposition, xrotation
		n3d_rotateYById N3D_LASTSET, xposition, yposition, zposition, yrotation
		n3d_rotateZById N3D_LASTSET, xposition, yposition, zposition, zrotation
	loop
return 0
//-----------------------------------------------------------------------------------------------------------------------------
#global
//-----------------------------------------------------------------------------------------------------------------------------
//-----------------------------------------------------------------------------------------------------------------------------
