#include "mod_joystick2.as"
#include "libn3d.hsp"
#include "mod_taggedlabel.hsp"
#include "hspogg.as"
#define FULLSCREEN 0

#define JOYSTICK_PORT 0

#packopt hide 1
#packopt name "sblaze.exe"


#define KY_LEFT		((ky&    1)>> 0)
#define KY_UP 		((ky&    2)>> 1)
#define KY_RIGHT	((ky&    4)>> 2)
#define KY_DOWN		((ky&    8)>> 3)
#define KY_Z		((ky& 2048)>>11)

#define pi 3.1415926535898

*init
	screen 0, 800, 800, SCREEN_HIDE
	dmmini
	dmmreset
	#define SOUNDID_LASER 0
	#define SOUNDID_BOXCRUSH 1
	#define SOUNDID_FLYUP 16
	#define SOUNDID_ENGINE 24
	#define SOUNDS_BOXCRUSH_COUNT 5
	#define SOUNDID_DONDONDON 64
	dmmload "lasershot.wav", SOUNDID_LASER, 0
	repeat SOUNDS_BOXCRUSH_COUNT
		dmmload "boxcrush" + cnt + ".wav", SOUNDID_BOXCRUSH + cnt, 0
	loop
	dmmload "flyup.wav", SOUNDID_FLYUP, 0
	dmmload "enginesound.wav", SOUNDID_ENGINE, 1
	dmmload "dondondon.wav", SOUNDID_DONDONDON, 1
	
	dmmvol SOUNDID_FLYUP, -1000
	dmmvol SOUNDID_ENGINE, -1000
	dmmvol SOUNDID_DONDONDON, -1000
	dim control_nostick
	control_nostick = 0
	if FULLSCREEN = 0{
		screen 1, 640, 480
	}
	if FULLSCREEN = 1{
		screen 1, 640, 480, SCREEN_HIDE
		scrzoom = limitf(double(GINFO_DISPX)/640, 0.0, double(GINFO_DISPY)/480)
		bgscr 29, GINFO_DISPX, GINFO_DISPY, 0, 0, 0
		cls 4
	}
	
	sdim testplane,65536
	bload "testplane.n3dm", testplane
	sdim laser,65536
	bload "laser.n3dm", laser
	sdim whitebox, 65536
	bload "whitebox.n3dm", whitebox
	sdim redbox, 65536
	bload "redbox.n3dm", redbox
	sdim octahedron, 65536
	bload "octahedron.n3dm", octahedron
	
	//îwåiêØ
	screen 2, 1600, 600, SCREEN_HIDE
	cls 4
	repeat 256
		x = rnd(1600)
		y = rnd(400)
		s = rnd(2)+1
		rgbcolor $888888
		circle x-s, y-s, x+s, y+s, 1
	loop
*start
	dmmstop -1
	n3d_initialize
	n3dm_initialize
	
	taglab_init
//	n3d_setCameraPosition -24.0, 0.0, -24.0
//	n3d_setCameraAngle 0.0, pi*0.35,0.0
	gsel 0
	
	//n3d_setCameraPosition -48.0, 0.0, -32.0
	//n3d_setCameraAngle 0.0, pi*0.25,0.0
	
	x=-195.2
	y=0.0
	z = -8.0
	ddim roll
	roll = 0.0
	ddim pitch
	pitch = 0.0
	ddim roll_targ
	roll_targ = 0.0
	ddim pitch_targ
	pitch_targ = 0.0
	
	
	dim bul_avail, 64
	ddim bul_x, 64
	ddim bul_y, 64
	ddim bul_z, 64
	dim bul_argphi, 64
	dim bul_argtheta, 64
	dim reshot
	dim bul_lifetime, 64
	
	dim cammode
	cammode = -1
	dim camtime
	camtime = 0
	
	dim  enem_avail	 	, 32
	ddim enem_x			, 32
	ddim enem_y			, 32
	ddim enem_z			, 32
	sdim enem_model,4096, 32
	dim enem_maincolor	, 32
	dim enem_type		, 32
	ddim enem_stateattr	, 32
	ddim enem_xs		, 32
	ddim enem_ys		, 32
	
	dim fcol, 128
	dim fa, 128
	ddim fx, 128
	ddim fy, 128
	ddim fz, 128
	ddim fxs, 128
	ddim fys, 128
	ddim fzs, 128
	ddim ft, 128
	ddim fp, 128
	ddim fts, 128
	ddim fps, 128
	ddim fs, 128
	dim flt, 128
	
	ddim rot
	
	dim airplane_speed
	airplane_speed = 7
	
	dim airplane_manuever_avail
	airplane_manuever_avail = 0
	
	dim axis_progress
	axis_progress = 0
	
	dim game_cameramode
	game_cameramode = 0
	
	dim game_reset
	game_reset = 0
	
	dim game_stageclear
	game_stageclear = 0
	
	dim game_over
	game_over = 0
	
	dim texttimer
	texttimer = 0
	
	dim game_score
	game_score = 0
	dim game_penalty
	game_penalty = 0
	
	dim dosummonproc
	dosummonproc = 0
	dim summon_timer
	summon_timer = 0
	dim summonstyle
	summonstyle = 0
	
	dim game_airplane_avail
	game_airplane_avail = 1
	
*main
	repeat
		gsel 0
		redraw 0
		color 0,0,0
		boxf
		color 255,255,255
		
		
		n3d_deleteall
		
		gosub *proc_key
		
		if cammode = -1{
			//camtime
			gosub *proc_axis
			gosub *proc_title_viewship
			gosub *proc_titletext
			gosub *title_control
			n3d_render
		}else:if cammode >= 0{
			gosub *proc_scene
			gosub *proc_camera
			gosub *proc_background
			gosub *proc_axis
			gosub *proc_enemy
			gosub *proc_reticle
			gosub *proc_starship
			gosub *proc_bullet
			gosub *proc_f
			if game_score >= 60 and game_stageclear = 0 and game_over = 0{
				//ÉQÅ[ÉÄÉNÉäÉAèåè
				game_stageclear = 1
				dmmstop SOUNDID_DONDONDON
			}
			n3d_render
		}
		
		if game_stageclear != 0{
			gosub *proc_gamecleartext
		}
		
		camtime += 1
		
		redraw 1
		
		gsel 1
		redraw 0
		gmode 0, 800, 800
		pos 320, 240
		grotate 0, 0, 0, deg2rad(roll / 4), 800, 800
		n3d_renderinfo
		rgbcolor $EEEEEE
		taglab_draw
		redraw 1
		
		if FULLSCREEN = 1{
			gsel 29
			pos (GINFO_DISPX - scrzoom * 640) / 2, (GINFO_DISPY - scrzoom * 480) / 2
			gzoom scrzoom * 640, scrzoom * 480, 1, 0, 0, 640, 480, 0
		}
		
		await 50
		if game_reset = 1{
			break
		}
		if ky & 128{
			game_reset = 0
			break
		}
//		if camtime=60:stop
	loop

	if game_reset = 1{
		goto *start
	}
	
	end
stop





*proc_key
	ky_bef = ky
	stick ky,$FFFF
	
	
	if control_nostick = 0{
		joyGetPosEx jky, JOYSTICK_PORT
		if stat = 0{
			if jky(2) < 32768 - 4096{
				ky |= 1
			}
			if jky(2) > 32768 + 4096{
				ky |= 4
			}
			if jky(3) < 32768 - 4096{
				ky |= 2
			}
			if jky(3) > 32768 + 4096{
				ky |= 8
			}
			if jky(8) & 15{
				ky |= 2048
			}
			if jky(8) & 16 + 32{
				ky |= 64
			}
		}
	}
	
	//logmes ky
	
	ky_trig = ky and (ky_bef xor 262133)
	
	return

*proc_starship
	if airplane_manuever_avail = 1{
		kya = ky// & (1 + 2 + 4 + 8 + 2048)
		kya_trig = ky_trig
	}else{
		kya_trig = 0
		if cammode = 1 and camtime >= 40 and camtime <= 100{
			kya = 4
		}else:if cammode = 3 and axis_progress = 0{
			kya = 2
		}else{
			kya = 0
		}
	}
	if kya&1{
		x-=3.2
		roll_targ = 40
		//xr=0.3
	}
	if kya&2{
		//y-=1.6
		z -= 3.2
		//yr=0.2
		pitch_targ = -20
	}
	if kya&4{
		x+=3.2
		//xr=-0.3
		roll_targ = -40
	}
	if kya&8{
		//y+=1.6
		z += 3.2
		pitch_targ = 20
		//yr=-0.2
	}
	if (kya&1)/1 = (kya&4)/4{
		//xr=0.0
		roll_targ = 0.0
	}
	if (kya&2)/2 = (kya&8)/8{
		//yr=0.0
		pitch_targ = 0.0
	}
	
	if       abs(pitch_targ - pitch) <= 10{
		pitch = pitch_targ
	}else:if pitch_targ > pitch{
		pitch += 5
	}else{
		pitch -= 5
	}
	
	if       abs(roll_targ - roll) <= 5{
		roll = roll_targ
	}else:if roll_targ > roll{
		roll += 10
	}else{
		roll -= 10
	}
	
	if (kya&2048)=2048 & reshot=0{
		reshot = 3
		repeat 64
			if bul_avail(cnt)=0{
				bul_avail(cnt)=1
				bul_x(cnt)= x - 5.0 * cos(deg2rad(roll))
				bul_y(cnt)=/*y+*/15.0+rnd(4)
				bul_z(cnt) = z + 5.0 * sin(deg2rad(roll))
				bul_argtheta(cnt) = int(pitch / 4)
				bul_argphi(cnt) = -int(roll / 6)
				bul_lifetime(cnt) = 0
				break
			}
		loop
		repeat 64
			if bul_avail(cnt)=0{
				bul_avail(cnt)=1
				bul_x(cnt)= x + 5.0 * cos(deg2rad(roll))
				bul_y(cnt)=/*y+*/15.0+rnd(4)
				bul_z(cnt) = z - 5.0 * sin(deg2rad(roll))
				bul_argtheta(cnt) = int(pitch / 4)
				bul_argphi(cnt) = -int(roll / 6)
				bul_lifetime(cnt) = 0
				break
			}
		loop
		dmmplay SOUNDID_LASER
	}
	reshot = limit(reshot-1, 0, 16)
	
	
	if axis_progress = 0 and cammode = 3{
		y -= airplane_speed * 2
		//z -= 2.0
	}else{
		z = limitf(z, -100.0, 0.0)
	}
	if game_airplane_avail = 1 and game_stageclear = 0{
		repeat length(enem_avail)
			ecnt = cnt
			if absf(-x - enem_x(ecnt)) < 8.0 and absf(-(y + 8) - enem_y(ecnt)) < 8.0 and absf((z - 2) - enem_z(ecnt)) < 6.0 and enem_avail(ecnt) = 1{
				game_over = 1
				game_cameramode = 0
				airplane_manuever_avail = 0
				game_airplane_avail = 0
				cammode = 6
				camtime = 0
				dmmplay SOUNDID_BOXCRUSH + rnd(SOUNDS_BOXCRUSH_COUNT)
				dmmstop SOUNDID_DONDONDON
				repeat 24
					gosub *function_f_findvacant
					fx(t) = y + 8 + double(rnd(81) - 40)/2
					fy(t) = - x + double(rnd(81) - 40)/2
					fz(t) = z + double(rnd(21) - 10)/2
					ft(t) = double(rnd(314)) / 100
					fp(t) = double(rnd(314)) / 100
					fa(t) = 1
					fs(t) = rnd(8) + 4
					fxs(t) = double(rnd(21) - 10)/10
					fys(t) = double(rnd(21) - 10)/10
					fzs(t) = double(rnd(21) - 10)/10
					fts(t) = double(rnd(11) - 5) / 100
					fps(t) = double(rnd(11) - 5) / 100
					if rnd(2) = 0{
						fcol(t) = $CCCCCC
						fs(t) = rnd(8) + 6
					}else{
						fcol(t) = $FF4444
					}
					flt(t) = 0
				loop
			}
		loop
	}
	
	if game_airplane_avail = 1{
		n3dm_setModel testplane, 1, -y, -x, z
		n3d_rotateXByGroup 1, -y, -x, z,  double(roll) * 2 * PI / 360//xr
		n3d_rotateYByGroup 1, -y, -x, z, double(pitch) * 2 * PI / 360//yr
	}
	return


*proc_bullet
	//n3d_deleteByGroup 2
	repeat 64
		if bul_avail(cnt)=1{
			bul_x(cnt) -= 24.0 * sin(deg2rad(90 + bul_argtheta(cnt))) * cos(deg2rad(90 + bul_argphi(cnt)))
			bul_y(cnt) -= 24.0 * sin(deg2rad(90 + bul_argtheta(cnt))) * sin(deg2rad(90 + bul_argphi(cnt)))
			if bul_lifetime(cnt) >= 1{
				bul_z(cnt) -= 24.0 * cos(deg2rad(90 + bul_argtheta(cnt)))
			}
			n3dm_setModelAndRotate laser, 100+cnt, -bul_y(cnt),-bul_x(cnt)-0.2, bul_z(cnt), 0.0, deg2rad(bul_argtheta(cnt)), 0.0
			//n3d_rotateXByGroup 100+cnt, -bul_y(cnt),-bul_x(cnt)-0.2, bul_z(cnt), bul_argtheta(cnt)
			if bul_y(cnt)<-640{
				bul_avail(cnt)=0
			}
			bul_lifetime(cnt) += 1
		}
	loop
	
	
	return

*proc_camera
	if cammode = 1{
		if camtime <= 1{
			dmmplay SOUNDID_ENGINE
			dmmplay SOUNDID_DONDONDON
			taglab_add 320, 240, "MISSION: ìGÅEè·äQï®ÇîjâÛÇπÇÊ", 80
			axis_progress = 1
		}
		if camtime < 40{
			sectime = camtime
			n3d_setCameraPosition 116.0 - 2.5 * sectime, 0.0 - x, 2.0 + z
			//n3d_setCameraAngle pi, pi*0.5, 0.0
			n3d_setCameraAngleByLookingAt 0.0, -x, z
		}
		if camtime >= 40 and camtime <= 40 + 60{
			repeat 3
				enem_avail(cnt) = 1
				enem_x(cnt) = 32.0 * cnt - 32.0
				enem_y(cnt) = 640.0
				enem_z(cnt) = -5.0 + abs(cnt - 1) * -20.0
				enem_model(cnt) = whitebox
				enem_maincolor(cnt) = $FFFFFF
				enem_type(cnt) = 0
				enem_stateattr(cnt) = 0.0
				enem_xs(cnt) = 0.0
				enem_ys(cnt) = 0.0
				enem_zs(cnt) = 0.0
			loop
			sectime = camtime - 40
			n3d_setCameraPosition 32.0 * cos(deg2rad(sectime * 3))- 16.0, 32.0 * sin(deg2rad(sectime * 3)) + 0.0 - x, 2.0 - (sectime) * 10 / 60 + z
			n3d_setCameraAngleByLookingAt 0.0, -x, z
		}
		/*if camtime > 100 and camtime <= 120{
			sectime = 60
			n3d_setCameraPosition 32.0 * cos(deg2rad(sectime * 3))- 16.0, 32.0 * sin(deg2rad(sectime * 3)) + 0.0 - x, 2.0 - (sectime) * 10 / 60 + z
			n3d_setCameraAngleByLookingAt 0.0, -x, z
		}*/
		if camtime = 80{
			taglab_add 320, 200, "READY?", 40
		}
		if camtime = 100{
			game_cameramode = 0
			cammode = 0
			camtime = 0
			dosummonproc = 1
			airplane_manuever_avail = 1
			game_airplane_avail = 1
		}
	}
	//camtime += 1
	if cammode = 0{
		//rot += 0.01
		if camtime = 20{
			taglab_add 320, 200, "LET'S GO!", 30
		}
		if game_cameramode = 0{
			n3d_setCameraPosition -48.0, 0.0 - x, -8.0 + z
			n3d_setCameraAngleByLookingAt 0.0, -x, z, rot
		}
		if game_cameramode = 1{
			n3d_setCameraPosition 0.0, 0.0 - x, -4.0 + z
			n3d_setCameraAngle 0.0, pi/2, rot
		}
	}
	if cammode = 2{
		sectime = camtime
		if camtime <= 30{
			n3d_setCameraPosition 48.0 * cos(deg2rad(180 - sectime * 5))- 0.0, 32.0 * sin(deg2rad(180 - sectime * 5)) + 0.0 - x, -8.0 + z
			n3d_setCameraAngleByLookingAt 0.0, -x, z
		}else{
			sectime = 30
			n3d_setCameraPosition 48.0 * cos(deg2rad(180 - sectime * 5))- 0.0, 32.0 * sin(deg2rad(180 - sectime * 5)) + 0.0 - x, -8.0 + z
			n3d_setCameraAngleByLookingAt 0.0, -x, z
		}
		if camtime = 90{
			cammode = 3
			camtime = 0
			airplane_manuever_avail = 0
			dmmstop SOUNDID_ENGINE
			dmmstop SOUNDID_DONDONDON
			dmmplay SOUNDID_FLYUP
		}
	}
	if cammode = 3{
		//gameclear, fly away
		if camtime >= 120{
			game_reset = 1
		}
		axis_progress = 0
		n3d_setCameraAngleByLookingAt -y, -x, z
	}
	t = c_sightt@nastty3d
	t = t + deg2rad(double(-pitch) / 5)
	c_sightt@nastty3d = t
	
	if cammode = 6{
		sectime = camtime
		taglab_add 320, 240, "GAME OVER", 1
		//gameover
		if camtime <= 30{
			n3d_setCameraPosition 48.0 * cos(deg2rad(180 - sectime * 5))- 0.0, 32.0 * sin(deg2rad(180 - sectime * 5)) + 0.0 - x, -8.0 + z
			n3d_setCameraAngleByLookingAt 0.0, -x, z
		}else{
			sectime = 30
			n3d_setCameraPosition 48.0 * cos(deg2rad(180 - sectime * 5))- 0.0, 32.0 * sin(deg2rad(180 - sectime * 5)) + 0.0 - x, -8.0 + z
			n3d_setCameraAngleByLookingAt 0.0, -x, z
		}
		if camtime >= 80{
			game_reset = 1
		}
	}
	
	if ky_trig & 64{
		game_cameramode = (game_cameramode + 1) \ 2
	}
	
	if ky&1024{
		//game_stageclear = 1
		//game_reset = 1
	}
	
	return

*proc_axis
	//Y(ècê¸
	repeat 51
		lcnt = cnt - 25 - ( x ) / 16
		if game_cameramode = 1 and cammode = 0{
			n3d_setpolygon 256, $444444, -24.0, 16.0 * lcnt, 0.0, 	768.0, 16.0 * lcnt, 0.0, 	-24.0, 16.0 * lcnt, 0.0
		}else{
			n3d_setpolygon 256, $444444, 0.0, 16.0 * lcnt, 0.0, 	768.0, 16.0 * lcnt, 0.0, 	-48.0, 16.0 * lcnt, 0.0
		}
		n3d_setpolygon 256, $444444, 32.0, 16.0 * lcnt, 0.0, 	256.0, 16.0 * lcnt, 0.0, 	128.0, 16.0 * lcnt, 0.0
		//n3d_setpolygon 256, $444444, 64.0, 16.0 * lcnt, 0.0,  8.0, 16.0 * lcnt, 0.0,  0.0, 16.0 * lcnt, 0.0
		
		n3d_setpolygon 256, $444444, 16.0, 16.0 * lcnt, 0.0, 36.0, 16.0 * lcnt, 0.0, -512.0, 16.0 * lcnt, 0.0
	loop
	if axis_progress = 1{
		axistimer = (axistimer + airplane_speed) \ 16
	}
	//X(â°ê¸
	repeat 96
		lcnt = cnt - 40
		n3d_setpolygon 256, $444444, 16.0 * lcnt - axistimer, -384.0 - x, 0.0,  16.0 * lcnt - axistimer, 384.0 - x, 0.0,  16.0 * lcnt - axistimer, 0.0 - x, 0.0
	loop
	return

*proc_enemy
	repeat length(enem_avail)
		if enem_avail(cnt) = 1{
			ecnt = cnt
			repeat length(bul_avail)
				if bul_avail(cnt) = 1{
					if absf(-bul_x(cnt) - enem_x(ecnt)) < 10.0 and absf(-bul_y(cnt) - enem_y(ecnt)) < 26.0 and absf(bul_z(cnt) - enem_z(ecnt)) < 10.0 and enem_avail(ecnt) = 1{
						
						//îjâÛ
						game_score += 1
						enem_avail(ecnt) = 0
						bul_avail(cnt) = 0
						dmmplay SOUNDID_BOXCRUSH + rnd(SOUNDS_BOXCRUSH_COUNT)
						repeat 6
							gosub *function_f_findvacant
							fx(t) = enem_y(ecnt)
							fy(t) = enem_x(ecnt) + double(rnd(21) - 10)/2
							fz(t) = enem_z(ecnt) + double(rnd(21) - 10)/2
							ft(t) = double(rnd(314)) / 100
							fp(t) = double(rnd(314)) / 100
							fa(t) = 1
							fs(t) = rnd(8) + 8
							fxs(t) = double(rnd(21) - 10)/10
							fys(t) = double(rnd(21) - 10)/10
							fzs(t) = double(rnd(21) - 10)/10
							fts(t) = double(rnd(15) - 7) / 100
							fps(t) = double(rnd(15) - 7) / 100
							fcol(t) = enem_maincolor(ecnt)
							flt(t) = 0
						loop
					}
				}
			loop
		}
	loop
	
	repeat length(enem_avail)
		if enem_avail(cnt) = 1{
			enem_x(cnt) += enem_xs(cnt)
			enem_y(cnt) += enem_ys(cnt)
			enem_z(cnt) += enem_zs(cnt)
			if enem_type(cnt) = 1{
				enem_stateattr(cnt) = (enem_stateattr(cnt) + 0.1) \ (2 * pi)
				if absf(enem_stateattr(cnt) - (pi * 3 / 4)) < (pi / 10){
					if absf((enem_stateattr(cnt) \ 0.5) - 0.5) < 0.1{
						gosub *function_enem_findvacant
						//ìGÇë≈ÇøèoÇ∑
						enem_avail(t) = 1
						enem_x(t) = enem_x(cnt)
						enem_y(t) = enem_y(cnt)
						enem_z(t) = enem_z(cnt)
						enem_maincolor(t) = $FF0000
						enem_model(t) = redbox
						enem_type(t) = 0
						d = sqrt((x - enem_x(cnt)) * (x - enem_x(cnt)) + (y - enem_y(cnt)) * (y - enem_y(cnt)) + (z - enem_z(cnt)) * (z - enem_z(cnt)))
						if d = 0.0{
							enem_xs(t) = 0.0
							enem_ys(t) = -2.0
							enem_zs(t) = 0.0
						}else{
							enem_xs(t) = atan(-enem_x(cnt) - x, d) * airplane_speed * 1.05
							enem_ys(t) = -1.0
							enem_zs(t) = atan(z - enem_z(cnt), d) * airplane_speed * 1.05
						}
					}
				}
			}
			
			if enem_y(cnt) < -256{
				enem_avail(cnt) = 0
				game_penalty += 1
			}
			n3dm_setModel enem_model(cnt), 512 + cnt, enem_y(cnt), enem_x(cnt), enem_z(cnt)
			n3d_rotateZByGroup 512 + cnt, enem_y(cnt), enem_x(cnt), enem_z(cnt), enem_stateattr(cnt)
			enem_y(cnt) -= airplane_speed
		}
	loop

	if dosummonproc = 1{
		if game_score > 15{
			summonstyle = 1
		}
		if summontimer <= 0{
			if summonstyle = 0{
				summontimer = rnd(32) + 8
				gosub *function_enem_findvacant
				//logmes t
				//ìG1
				enem_avail(t) = 1
				enem_x(t) = -x + double(rnd(129) - 64)
				enem_y(t) = 768.0
				enem_z(t) = -double(rnd(100))
				enem_maincolor(t) = $FFFFFF
				enem_model(t) = whitebox
				enem_type(t) = 0
				enem_xs(t) = 0.0
				enem_ys(t) = 0.0
				enem_zs(t) = 0.0
			}
			if summonstyle = 1{
				summontimer = rnd(40) - (game_score / 5) + 3
				gosub *function_enem_findvacant
				//logmes t
				enem_avail(t) = 1
				enem_x(t) = -x + double(rnd(129) - 64)
				enem_y(t) = 768.0
				enem_z(t) = -double(rnd(100))
				enem_xs(t) = 0.0
				enem_ys(t) = 0.0
				enem_zs(t) = 0.0
				if rnd(3) = 0{
					//ìG2
					enem_model(t) = octahedron
					enem_type(t) = 1
					enem_maincolor(t) = $FF4444
					enem_stateattr(t) = double(rnd(314))/100
				}else{
					//ìG1
					enem_model(t) = whitebox
					enem_type(t) = 0
					enem_maincolor(t) = $FFFFFF
					enem_stateattr(t) = 0.0
				}
			}
		}
		summontimer -= 1
	}
	
	taglab_add 560, 460, "åÇîjêî: "+strf("%2d", game_score), 1
	
	
	return
*function_enem_findvacant
	t = 0
	repeat length(enem_avail)
		if enem_avail(cnt) = 0{
			t = cnt
			break
		}
	loop
	return

*proc_f
	repeat length(fa)
		if fa(cnt) = 1{
			fx(cnt) += fxs(cnt)
			fy(cnt) += fys(cnt)
			fz(cnt) += fzs(cnt)
			ft(cnt) += fts(cnt)
			fp(cnt) += fps(cnt)
			
			flt(cnt) += 1
			
			if axis_progress = 1{
				fx(cnt) -= airplane_speed
			}
			
			//n3d_deleteByGroup 1024 + cnt
			
			if flt(cnt) \ 8 = 7{
				fs(cnt) -= 1
				if fs(cnt) = 0{
					fa(cnt) = 0
				}
			}
			if flt(cnt) > 128{
				fa(cnt) = 0
			}
			if fx(cnt) < -32 and cammode = 0{
				fa(cnt) = 0
			}
			n3d_setpolygon 1024 + cnt, fcol(cnt), fx(cnt), fy(cnt), fz(cnt),  fx(cnt) - fs(cnt), fy(cnt), fz(cnt),  fx(cnt), fy(cnt) - sqrt(fs(cnt) * 3 / 2), fz(cnt) - sqrt(fs(cnt) * 3 / 2)
			n3d_rotateXById N3D_LASTSET, fx(cnt), fy(cnt), fz(cnt),ft(cnt)
			n3d_rotateYById N3D_LASTSET, fx(cnt), fy(cnt), fz(cnt),fp(cnt)
			if cammode != 0 or fx(cnt) >= 0{
				//n3d_rotateXByGroup 1024 + cnt, fx(cnt), fy(cnt), fz(cnt),ft(cnt)
				//n3d_rotateYByGroup 1024 + cnt, fx(cnt), fy(cnt), fz(cnt),fp(cnt)
			}
		}else{
		}
		
	loop//*/
	
	return

*function_f_findvacant
	t = (t + 1) \ length(fa)
	repeat length(fa)
		if fa(cnt) = 0{
			t = cnt
			break
		}
	loop
	return


*proc_background
	gmode 0
	pos -800 + rad2deg(c_sightp@nastty3d) * 1600 / 360, -pitch
	gcopy 2, 0, 0, 1600, 600
	pos -1600-800 + rad2deg(c_sightp@nastty3d) * 1600 / 360, -pitch
	gcopy 2, 0, 0, 1600, 600
	return

*proc_reticle
	if cammode = 0{
		//n3d_setCameraPosition -48.0, 0.0 - x, -8.0 + z
		//n3d_setpolygon 4096 + cnt, $FF0000, 0.0, -x - 0.25, z,   0.0, -x + 0.25, z,   256.0, -x, z
	}
	return

*proc_title_viewship
	vs_angle = vs_angle + 3
	n3d_setpolygon 1536, $444444, -10.0, -10.0, 2.0,	-10.0, 10.0, 2.0,	 8.0, -10.0, 2.0
	n3d_setpolygon 1536, $444444,   8.0,  10.0, 2.0,	-10.0, 10.0, 2.0,	 8.0, -10.0, 2.0
	n3dm_setModel testplane, 1, 0, 0, 0
	n3d_setCameraPosition cos(deg2rad(vs_angle)) * 24.0, sin(deg2rad(vs_angle)) * 24.0, -12.0
	n3d_setCameraAngleByLookingAt 0.0, 0.0, 0.0
	return


*proc_titletext
	taglab_add 320, 180, "SCRAMBLE BLAZE", 1
	if camtime \ 192 < 32{
		taglab_add 320, 240, "[Btn A] Ç≈ÉXÉ^Å[Ég", 1
	}else:if camtime \ 192 < 96{
		taglab_add 320, 240, "ëÄçÏï˚ñ@", 1
		taglab_add 320, 280, "[Å©][Å™][Å®][Å´]Ç≈à⁄ìÆ", 1
		taglab_add 320, 320, "[Btn  A]Ç≈î≠éÀ", 1
		taglab_add 320, 360, "[Btn LR]Ç≈éãì_ïœçX", 1
	}else:if camtime \ 192 < 160{
		taglab_add 320, 240, "ëÄçÏï˚ñ@", 1
		taglab_add 320, 280, "[Å©][Å™][Å®][Å´]Ç≈à⁄ìÆ", 1
		taglab_add 320, 320, "[Z]Ç≈î≠éÀ", 1
		taglab_add 320, 360, "[LCTRL]Ç≈éãì_ïœçX", 1
	}else{
		taglab_add 320, 240, "[Z] Ç≈ÉXÉ^Å[Ég", 1
	}
	taglab_add 320, 440, "First Prototype", 1
	taglab_add 320, 460, "(C)2023 nasTTY", 1
	return

*title_control
	if ky_trig & 2048{//Z
		camtime = 0
		cammode = 1
	}
	return


*proc_scene
	if game_stageclear = 1{
		dosummonproc = 0
		game_stageclear = 2
		texttimer = 0
		cammode = 2
		camtime = 0
	}
	return


*proc_gamecleartext
	if texttimer >= 0{
		taglab_add 320, 160, "CLEAR!", 1
	}
	if texttimer >= 40{
		taglab_add 320, 220, "       îjâÛÇµÇΩï®ëÃ: "+strf("%8d", game_score), 1
	}
	//game_penalty
	if texttimer >= 60{
		if texttimer = 60{
			if (game_penalty + game_score) = 0{
				message_percentage = 0
			}else{
				message_percentage = game_score * 100 / (game_penalty + game_score)
			}
		}
		taglab_add 320, 260, "             åÇîjó¶: "+strf("%6d", message_percentage) + " %", 1
	}
	if texttimer >= 80{
		taglab_add 320, 300, " ëºÇ…èëÇ≠Ç±Ç∆Ç™ñ≥Ç¢: "+strf("%8d", 123456), 1
	}
	
	if texttimer >= 100{
		taglab_add 320, 340, "         rnd(32767): "+strf("%8d", rnd(32767)), 1
	}
	
	if texttimer >= 120{
		taglab_add 320, 380, "                1îN: "+strf("%5d", 365) + " ì˙", 1
	}
	
	logmes texttimer
	texttimer += 1
	return